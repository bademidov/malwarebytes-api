$authURI = "https://api.malwarebytes.com/oauth2/token"
Write-Host " "
$client_id = Read-Host "Enter Nebula or OneView client_id"
$client_secret = Read-Host "Enter Nebula or OneView client secret"
$scopes = @("read", "write", "execute")
$access_scopes = @()

$credential_pair = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(($client_id, $client_secret -join ":")))

function Get-AuthToken($scope) {
    $headers = @{
        "Authorization" = ("Basic", $credential_pair -join " ");
        "Content-Type" = "application/x-www-form-urlencoded"
    }

    $body = @{
        scope="$scope"
        grant_type="client_credentials"
    }

    try {
        $AuthResult = Invoke-RestMethod -Method POST -Uri $authURI -Body $body -Headers $headers
    }
    catch {
        return 1
    }

    $AuthResult.access_token
}

function Show-Token($token) {
    Write-Host " "
    Write-Host "Access token for testing (expires in 1 hour): "
    Write-Host $token -ForegroundColor DarkCyan
    Write-Host " "
}


Write-Host " "

if ([string]::IsNullOrEmpty($client_id) -Or [string]::IsNullOrEmpty($client_secret)){
    Write-Host "Client ID or client secret is empty. Please try again." -ForegroundColor Red
    exit
}

Write-Host "Base64 encoded credential pair: "
Write-Host $credential_pair -ForegroundColor DarkCyan

Write-Host " "
Write-Host "Testing provided credentials and access privileges..."

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$tokens = @()

foreach ($scope in $scopes) {
    $token = Get-AuthToken $scope
    if ($token -ne 1) {
        $access_scopes += $scope
    }
}

if ($access_scopes.Count -eq 0) {
    Write-Host "ERROR: Failed to authenticate. Please check you credentials or network connection and try again." -ForegroundColor Red
    Write-Host " "
}
else {
    Write-Host " "
    Write-Host "Success!" -ForegroundColor Green
    Write-Host "Your access scope: " -NoNewline
    Write-Host $access_scopes -ForegroundColor DarkCyan

    Write-Host " "
    Write-Host "Generating an access token for testing (expires in 1 hour):"
    Write-Host $(Get-AuthToken $access_scopes) -ForegroundColor DarkCyan
    Write-Host " "
}